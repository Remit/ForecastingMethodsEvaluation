pred.test.interval <- prediction.steps.num * 3600
} else {
test.set.length.days <- 7
pred.test.interval <- test.set.length.days * 24 * 3600
}
# Splitting time series for training and test data sets
train.ts$series <- window(example.ts$series, as.numeric(example.ts$start), as.numeric(example.ts$end - pred.test.interval))
train.ts$start <- example.ts$start
train.ts$end <- example.ts$end - pred.test.interval
train.ts$discretion <- example.ts$discretion
test.ts$series <- window(example.ts$series, as.numeric(example.ts$end - pred.test.interval + 3600), as.numeric(example.ts$end))
test.ts$start <- example.ts$end - pred.test.interval + 3600
test.ts$end <- example.ts$end
test.ts$discretion <- example.ts$discretion
prediction.steps.num <- -1
example.ts <- list()
example.ts$series <- time.series
example.ts$start <- start.time
example.ts$end <- start.time + length(time.series) * 3600
example.ts$discretion <- 3600
# Using user-specified value for the number of predicted steps
train.ts <- list()
test.ts <- list()
pred.test.interval <- 0
if(prediction.steps.num >= 0) {
pred.test.interval <- prediction.steps.num * 3600
} else {
test.set.length.days <- 7
pred.test.interval <- test.set.length.days * 24 * 3600
}
# Splitting time series for training and test data sets
train.ts$series <- window(example.ts$series, as.numeric(example.ts$start), as.numeric(example.ts$end - pred.test.interval))
train.ts$start <- example.ts$start
train.ts$end <- example.ts$end - pred.test.interval
train.ts$discretion <- example.ts$discretion
test.ts$series <- window(example.ts$series, as.numeric(example.ts$end - pred.test.interval + 3600), as.numeric(example.ts$end))
test.ts$start <- example.ts$end - pred.test.interval + 3600
test.ts$end <- example.ts$end
test.ts$discretion <- example.ts$discretion
tail(train.ts$series)
tail(test.ts$series)
1509946883 - 1509363683
head(test.ts$series)
1509367283 - 1509363683
time(test.ts$series)
test.ts$series
xts(test.ts$series)
xts(test.ts$series, time(test.ts$series))
as.POSIXct(time(test.ts$series), origin="1970-01-01")
as.POSIXct(time(test.ts$series[[1]]), origin="1970-01-01")
as.POSIXct(time(test.ts$series[1]), origin="1970-01-01")
test.ts$series
as.vector(time(test.ts$series))
as.POSIXct(as.vector(time(test.ts$series)), origin="1970-01-01")
xts(as.vector(test.ts$series), as.POSIXct(as.vector(time(test.ts$series)), origin="1970-01-01"))
xts(data.frame(a = as.vector(test.ts$series), b = as.vector(test.ts$series)), as.POSIXct(as.vector(time(test.ts$series)), origin="1970-01-01"))
?influx_write
as.POSIXct("1970-01-01")
start.time <-  as.POSIXct("1970-01-01")
example.ts <- list()
example.ts$series <- time.series
example.ts$start <- start.time
example.ts$end <- start.time + length(time.series) * 3600
example.ts$discretion <- 3600
# Using user-specified value for the number of predicted steps
train.ts <- list()
test.ts <- list()
pred.test.interval <- 0
if(prediction.steps.num >= 0) {
pred.test.interval <- prediction.steps.num * 3600
} else {
test.set.length.days <- 7
pred.test.interval <- test.set.length.days * 24 * 3600
}
# Splitting time series for training and test data sets
train.ts$series <- window(example.ts$series, as.numeric(example.ts$start), as.numeric(example.ts$end - pred.test.interval))
train.ts$start <- example.ts$start
train.ts$end <- example.ts$end - pred.test.interval
train.ts$discretion <- example.ts$discretion
test.ts$series <- window(example.ts$series, as.numeric(example.ts$end - pred.test.interval + 3600), as.numeric(example.ts$end))
test.ts$start <- example.ts$end - pred.test.interval + 3600
test.ts$end <- example.ts$end
test.ts$discretion <- example.ts$discretion
actual.vals <- test.ts$series
alpha <- 0.05 # Alpha could be changed to loosen or strenghten the interval scoring
train.length <- length(train.ts$series)
actual.vals.ext <- c(as.vector(train.ts$series), as.vector(test.ts$series))
timeline.ext <- c(as.vector(time(train.ts$series)), as.vector(time(test.ts$series)))
as.numeric(example.ts$start)
example.ts$start
example.ts$end
as.POSIXct(Sys.time())
start.time <- as.POSIXct(Sys.time())
example.ts <- list()
example.ts$series <- time.series
example.ts$start <- start.time
example.ts$end <- start.time + length(time.series) * 3600
example.ts$discretion <- 3600
# Using user-specified value for the number of predicted steps
train.ts <- list()
test.ts <- list()
pred.test.interval <- 0
if(prediction.steps.num >= 0) {
pred.test.interval <- prediction.steps.num * 3600
} else {
test.set.length.days <- 7
pred.test.interval <- test.set.length.days * 24 * 3600
}
# Splitting time series for training and test data sets
train.ts$series <- window(example.ts$series, as.numeric(example.ts$start), as.numeric(example.ts$end - pred.test.interval))
train.ts$start <- example.ts$start
train.ts$end <- example.ts$end - pred.test.interval
train.ts$discretion <- example.ts$discretion
test.ts$series <- window(example.ts$series, as.numeric(example.ts$end - pred.test.interval + 3600), as.numeric(example.ts$end))
test.ts$start <- example.ts$end - pred.test.interval + 3600
test.ts$end <- example.ts$end
test.ts$discretion <- example.ts$discretion
actual.vals <- test.ts$series
alpha <- 0.05 # Alpha could be changed to loosen or strenghten the interval scoring
train.length <- length(train.ts$series)
actual.vals.ext <- c(as.vector(train.ts$series), as.vector(test.ts$series))
timeline.ext <- c(as.vector(time(train.ts$series)), as.vector(time(test.ts$series)))
example.ts$start
as.numeric(example.ts$start)
example.ts$end
pred.test.interval
example.ts$end - pred.test.interval
as.numeric(example.ts$start) < as.numeric(example.ts$end - pred.test.interval)
window(example.ts$series, as.numeric(example.ts$start), as.numeric(example.ts$end - pred.test.interval))
?window
example.ts$series
time.series
time.series <- lst[[10]]
time.series
time(example.ts$series)[1]
?xts
show_databases(influx.con)
example.ts <- list()
example.ts$series <- time.series
example.ts$start <- start.time
example.ts$end <- start.time + length(time.series) * 3600
example.ts$discretion <- 3600
# Using user-specified value for the number of predicted steps
train.ts <- list()
test.ts <- list()
pred.test.interval <- 0
if(prediction.steps.num >= 0) {
pred.test.interval <- prediction.steps.num * 3600
} else {
test.set.length.days <- 7
pred.test.interval <- test.set.length.days * 24 * 3600
}
# Splitting time series for training and test data sets
train.ts$series <- window(example.ts$series, as.numeric(example.ts$start), as.numeric(example.ts$end - pred.test.interval))
train.ts$start <- example.ts$start
train.ts$end <- example.ts$end - pred.test.interval
train.ts$discretion <- example.ts$discretion
test.ts$series <- window(example.ts$series, as.numeric(example.ts$end - pred.test.interval + 3600), as.numeric(example.ts$end))
test.ts$start <- example.ts$end - pred.test.interval + 3600
test.ts$end <- example.ts$end
test.ts$discretion <- example.ts$discretion
actual.vals <- test.ts$series
alpha <- 0.05 # Alpha could be changed to loosen or strenghten the interval scoring
train.length <- length(train.ts$series)
actual.vals.ext <- c(as.vector(train.ts$series), as.vector(test.ts$series))
timeline.ext <- c(as.vector(time(train.ts$series)), as.vector(time(test.ts$series)))
# Deriving different forecasting models and forecasts with prediction intervals
# TODO:
# 2. adding point forecasts
ets.start.time <- Sys.time()
ets.forecast.res = ets.forecast(train.ts$series, length(test.ts$series))
ets.end.time <- Sys.time()
ets.duration <- difftime(ets.end.time, ets.start.time, units = "secs")
ets.lb.95 <- ets.forecast.res$lower[,2]
ets.ub.95 <- ets.forecast.res$upper[,2]
ets.score <- interval.score(ets.lb.95, ets.ub.95, actual.vals, alpha)
if(!is.null(influx.con)) {
lb.95.ext <- c(rep(0, train.length), ets.lb.95)
ub.95.ext <- c(rep(0, train.length), ets.ub.95)
# point.ext <- c(rep(0, train.length), ets.point)
df <- data.frame(lb = lb.95.ext,
ub = ub.95.ext,
av = actual.vals.ext)
xts.obj <- xts(df, as.POSIXct(timeline.ext, origin="1970-01-01"))
influx_write(xts.obj, influx.con, db.name, "ETS")
}
influx_select(influx.con,
"client1",
field_keys = "value",
rp = "default",
measurement = "ETS")
influx_select(influx.con,
"client1",
field_keys = "value",
measurement = "ETS")
?ets
fit <- ets(USAccDeaths)
library(forecast)
fit <- ets(USAccDeaths)
?forecast.ets
fit <- ets(USAccDeaths)
tt <- forecast(fit,h=48)
tt$mean
tt$upper
tt$upper[,2]
?influx_write
install.packages("influxdbr")
install.packages("tsoutliers")
?influx_connection
?influxdbr::influx_connection
?xts
?influxdbr::influx_connection
library(influxdbr)
?influx_connection
strsplit("localhost:8080",split=':', fixed=TRUE)
strsplit("localhost:8080",split=':', fixed=TRUE)[1]
strsplit("localhost:8080",split=':', fixed=TRUE)[[[1]]
strsplit("localhost:8080",split=':', fixed=TRUE)[[1]]
strsplit("localhost:8080",split=':', fixed=TRUE)[[1]][1]
length(strsplit("localhost:8080",split=':', fixed=TRUE)[[1]])
?as.Date
?as.POSIXct
as.POSIXct(strptime("2017-11-06 10:41:23", "%Y-%m-%d %H:%M:%S"))
as.numeric(as.POSIXct(strptime("2017-11-06 10:41:23", "%Y-%m-%d %H:%M:%S")))
as.numeric(as.POSIXct(strptime("2017-11-06 10:41:23", "%Y-%m-%d %H:%M:%S"))) - 4 * 7 * 24 * 60 * 60
lst[[1]]
lst[[1]]
names(lst)
ddff(lst)
?parLapply
?parLapply
data.raw <- read.csv2(file = "/home/remit/dissCloud/Instana/data/test.csv", header = F, sep = ",", stringsAsFactors = F)
class(data.raw)
names(data.raw)
row.names(data.raw)
nrow(data.fra,e)
nrow(raw.data
)
nrow(data.raw)
data.raw <- read.csv2(file = "/home/remit/dissCloud/Instana/data/test.csv", header = F, sep = ",", stringsAsFactors = F)
data.raw <- read.csv2(file = "/home/remit/dissCloud/Instana/data/test.csv", header = F, sep = ",", stringsAsFactors = F)
nrow(data.raw)
row.names(data.raw)
row.names(data.raw[1,])
suppressMessages(library(reshape2))
suppressMessages(require(imputeTS))
# A function to preprocess a timeseries row in order to introduce NAs instead of negative values
ts.preprocessing <- function(row, start.time) {
num.row = as.numeric(row)
num.row.NA = replace(num.row, num.row == -1, NA)
if(length(num.row) - sum(is.na(num.row.NA)) >= 2) {
num.row.interpolated = na.interpolation(num.row.NA)
} else {
# In the worst case, replace NA value with a non-NA value from the same time series
num.row.interpolated = na.replace(num.row.NA, fill = num.row.NA[which(!is.na(num.row.NA))[[1]]])
}
end   <- start.time + length(num.row) * 3600
row.ts <- ts(num.row.interpolated, start = as.numeric(start.time), end = as.numeric(end), deltat = 3600)
# Getting rid of time series with only zero values
if(sum((row.ts < -1e-03) | (row.ts > 1e-03)) == 0) {
row.ts <- NULL
}
return(list(row.ts))
}
lst = apply(data.raw, 1, ts.preprocessing, start.time)
names(lst)
row.names(lst)
row.names(lst[[1]])
ts.preprocessing <- function(row, start.time) {
num.row = as.numeric(row)
num.row.NA = replace(num.row, num.row == -1, NA)
if(length(num.row) - sum(is.na(num.row.NA)) >= 2) {
num.row.interpolated = na.interpolation(num.row.NA)
} else {
# In the worst case, replace NA value with a non-NA value from the same time series
num.row.interpolated = na.replace(num.row.NA, fill = num.row.NA[which(!is.na(num.row.NA))[[1]]])
}
end   <- start.time + length(num.row) * 3600
row.ts <- ts(num.row.interpolated, start = as.numeric(start.time), end = as.numeric(end), deltat = 3600)
# Getting rid of time series with only zero values
if(sum((row.ts < -1e-03) | (row.ts > 1e-03)) == 0) {
row.ts <- NULL
}
res <- list(row.ts)
names(res) <- row.names(row)
return(res)
}
lst = apply(data.raw, 1, ts.preprocessing, start.time)
names(lst)
names(lst[[1]])
lst[[1]]
colnames(lst)
ts.preprocessing <- function(row, start.time) {
num.row = as.numeric(row)
num.row.NA = replace(num.row, num.row == -1, NA)
if(length(num.row) - sum(is.na(num.row.NA)) >= 2) {
num.row.interpolated = na.interpolation(num.row.NA)
} else {
# In the worst case, replace NA value with a non-NA value from the same time series
num.row.interpolated = na.replace(num.row.NA, fill = num.row.NA[which(!is.na(num.row.NA))[[1]]])
}
end   <- start.time + length(num.row) * 3600
row.ts <- ts(num.row.interpolated, start = as.numeric(start.time), end = as.numeric(end), deltat = 3600, names = row.names(row))
# Getting rid of time series with only zero values
if(sum((row.ts < -1e-03) | (row.ts > 1e-03)) == 0) {
row.ts <- NULL
}
res <- list(row.ts)
#names(res) <- row.names(row)
return(res)
}
lst = apply(data.raw, 1, ts.preprocessing, start.time)
names(lst)
lst[[1]]
names(lst[[1]])
ts.preprocessing <- function(row, start.time) {
num.row = as.numeric(row)
num.row.NA = replace(num.row, num.row == -1, NA)
if(length(num.row) - sum(is.na(num.row.NA)) >= 2) {
num.row.interpolated = na.interpolation(num.row.NA)
} else {
# In the worst case, replace NA value with a non-NA value from the same time series
num.row.interpolated = na.replace(num.row.NA, fill = num.row.NA[which(!is.na(num.row.NA))[[1]]])
}
end   <- start.time + length(num.row) * 3600
print(row.names(row))
row.ts <- ts(num.row.interpolated, start = as.numeric(start.time), end = as.numeric(end), deltat = 3600, names = row.names(row))
# Getting rid of time series with only zero values
if(sum((row.ts < -1e-03) | (row.ts > 1e-03)) == 0) {
row.ts <- NULL
}
res <- list(row.ts)
#names(res) <- row.names(row)
return(res)
}
lst = apply(data.raw, 1, ts.preprocessing, start.time)
row.names(data.raw)
row.names(data.raw[1,])
names(data.raw[1,])
row.names(data.raw[1,])
?apply
c(1,2,3)[-1]
ts.preprocessing <- function(row, start.time) {
row.id <- as.numeric(row[1])
num.row = as.numeric(row[-1])
num.row.NA = replace(num.row, num.row == -1, NA)
if(length(num.row) - sum(is.na(num.row.NA)) >= 2) {
num.row.interpolated = na.interpolation(num.row.NA)
} else {
# In the worst case, replace NA value with a non-NA value from the same time series
num.row.interpolated = na.replace(num.row.NA, fill = num.row.NA[which(!is.na(num.row.NA))[[1]]])
}
end   <- start.time + length(num.row) * 3600
print(row.names(row))
row.ts <- ts(num.row.interpolated, start = as.numeric(start.time), end = as.numeric(end), deltat = 3600)
# Getting rid of time series with only zero values
if(sum((row.ts < -1e-03) | (row.ts > 1e-03)) == 0) {
row.ts <- NULL
}
res <- list(row.ts)
names(res) <- row.id
return(res)
}
data.raw.modified <- cbind(row.names(data.raw), data.raw)
lst = apply(data.raw.modified, 1, ts.preprocessing, start.time)
data.raw.modified <- cbind(row.names(data.raw), data.raw)
lst = apply(data.raw.modified, 1, ts.preprocessing, start.time)
ts.preprocessing <- function(row, start.time) {
row.id <- as.numeric(row[1])
num.row = as.numeric(row[-1])
num.row.NA = replace(num.row, num.row == -1, NA)
if(length(num.row) - sum(is.na(num.row.NA)) >= 2) {
num.row.interpolated = na.interpolation(num.row.NA)
} else {
# In the worst case, replace NA value with a non-NA value from the same time series
num.row.interpolated = na.replace(num.row.NA, fill = num.row.NA[which(!is.na(num.row.NA))[[1]]])
}
end   <- start.time + length(num.row) * 3600
row.ts <- ts(num.row.interpolated, start = as.numeric(start.time), end = as.numeric(end), deltat = 3600)
# Getting rid of time series with only zero values
if(sum((row.ts < -1e-03) | (row.ts > 1e-03)) == 0) {
row.ts <- NULL
}
res <- list(row.ts)
names(res) <- row.id
return(res)
}
ts.preprocessing <- function(row, start.time) {
row.id <- as.numeric(row[1])
num.row = as.numeric(row[-1])
num.row.NA = replace(num.row, num.row == -1, NA)
if(length(num.row) - sum(is.na(num.row.NA)) >= 2) {
num.row.interpolated = na.interpolation(num.row.NA)
} else {
# In the worst case, replace NA value with a non-NA value from the same time series
num.row.interpolated = na.replace(num.row.NA, fill = num.row.NA[which(!is.na(num.row.NA))[[1]]])
}
end   <- start.time + length(num.row) * 3600
row.ts <- ts(num.row.interpolated, start = as.numeric(start.time), end = as.numeric(end), deltat = 3600)
# Getting rid of time series with only zero values
if(sum((row.ts < -1e-03) | (row.ts > 1e-03)) == 0) {
row.ts <- NULL
}
res <- list(row.ts)
names(res) <- row.id
return(res)
}
data.raw.modified <- cbind(row.names(data.raw), data.raw)
lst = apply(data.raw.modified, 1, ts.preprocessing, start.time)
names(lst)
names(lst[[1]])
names(lst[[2]])
lapply(lst, names)
sapply(lst, names)
ts.preprocessing <- function(row, start.time) {
row.id <- as.numeric(row[1])
num.row <- as.numeric(row[-1])
num.row.NA = replace(num.row, num.row == -1, NA)
if(length(num.row) - sum(is.na(num.row.NA)) >= 2) {
num.row.interpolated = na.interpolation(num.row.NA)
} else {
# In the worst case, replace NA value with a non-NA value from the same time series
num.row.interpolated = na.replace(num.row.NA, fill = num.row.NA[which(!is.na(num.row.NA))[[1]]])
}
end   <- start.time + length(num.row) * 3600
row.ts <- ts(num.row.interpolated, start = as.numeric(start.time), end = as.numeric(end), deltat = 3600)
# Getting rid of time series with only zero values
if(sum((row.ts < -1e-03) | (row.ts > 1e-03)) == 0) {
row.ts <- NULL
}
res <- list(row.ts)
names(res) <- row.id
return(res)
}
data.raw.modified <- cbind(row.names(data.raw), data.raw)
lst = apply(data.raw.modified, 1, ts.preprocessing, start.time)
sapply(lst, names)
class(sapply(lst, names))
lst[[1]]
i <- 1
lst.filtered <- list()
while(i <= length(lst)) {
if(!is.null(lst[[i]][[1]])) {
lst.filtered <- c(lst.filtered, lst[[i]])
}
i <- i + 1
}
class(sapply(lst.filtered, names))
sapply(lst.filtered, names)
names(lst.filtered[[1]])
names(lst[[1]])
i <- 1
lst.filtered <- list()
while(i <= length(lst)) {
if(!is.null(lst[[i]][[1]])) {
lst.filtered <- c(lst.filtered, lst[[i]])
names(lst.filtered[[i]]) <- names(lst[[i]])
}
i <- i + 1
}
length(lst)
i <- 1
lst.filtered <- list()
while(i <= length(lst)) {
if(!is.null(lst[[i]][[1]])) {
lst.filtered <- c(lst.filtered, lst[[i]])
names(lst.filtered[[length(lst.filtered)]]) <- names(lst[[i]])
}
i <- i + 1
}
sapply(lst.filtered, names)
names(lst[[1]])
names(lst[[c(1,2,3)]])
sapply(lst, names)
sapply(lst[c(1,2,3)], names)
i <- 1
lst.filtered <- list()
ids <- c()
while(i <= length(lst)) {
if(!is.null(lst[[i]][[1]])) {
lst.filtered <- c(lst.filtered, lst[[i]])
ids <- c(ids, i)
}
i <- i + 1
}
names(lst.filtered) <- sapply(lst[ids], names)
names(lst.filtered)
names(lst.filtered) <- as.numeric(sapply(lst[ids], names))
names(lst.filtered)
names(lst.filtered[[1]])
j <- 1
while(j <= length(lst.filtered)) {
names(lst.filtered[[j]]) <- ids[j]
}
j <- 1
while(j <= length(lst.filtered)) {
names(lst.filtered[[j]]) <- ids[j]
j <- j + 1
}
names(lst.filtered[[1]])
names(lst.filtered[[2]])
name(lst.filtered[[2]])
?makeCluster
load(file = "ScoresAndModels.RData")
getwd()
setwd("/home/remit/dissCloud/Predictions/")
load(file = "ScoresAndModels.RData")
scores.and.models$scores
df1 <- data.frame(a = c(1,2,3), b = c(4,5,6))
df2 <- data.frame(g = c(7,8,9))
cbind(df1, df2)
names(df2)
